version: 2.1

commands:
  set-env:
    description: "Set environment variables."
    steps:
      - run:
          name: "Set environment variables."
          command: |
            echo "backend : Agg" > $HOME/matplotlibrc
            echo 'export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH' >> $BASH_ENV
            echo 'export YT_DATA_DIR=$HOME/yt_test' >> $BASH_ENV
            echo 'export MATPLOTLIBRC=$HOME' >> $BASH_ENV

  install-dependencies:
    description: "Install dependencies."
    steps:
      - run:
          name: "Install dependencies."
          command: |
            git submodule update --init --remote
            source $BASH_ENV
            sudo apt update
            sudo apt install -y libhdf5-serial-dev gfortran libtool-bin
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            # the following dependencies are just used for testing
            pip install flake8
            pip install packaging
            sudo apt install castxml

  lint:
    description: "Lint."
    steps:
      - run:
          name: "Lint."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            cd src/python
            flake8 pygrackle examples tests

  install-grackle:
    description: "Install grackle."
    parameters:
      omp:
        type: enum
        default: 'false'
        enum: ['true', 'false']
      classic_build:
        type: enum
        default: 'true'
        enum: ['true', 'false']
    steps:
      - run:
          name: "Install grackle."
          command: |
            source $HOME/venv/bin/activate

            # First, try resetting things to a pristine condition (in the event
            # that grackle was previously built
            # -> this is important if we want to perform a cmake build after
            #    a traditional build
            rm -rf $HOME/local # installation location
            ./configure # this is needed so we can call `make clean` (in the
                        # event that we haven't called ./configure since the
                        # last time we tried to do this sort of cleanup)
            cd src/clib
            make clean
            cd -
            cd src/python
            make clean
            cd -
            # remove the files produced by ./configure
            rm -f src/clib/Make.config.override src/clib/Make.config.machine src/clib/DEPEND
            # remove the files produced in a cmake-build
            rm -rf build


            # Next, we actually perform the installation
            if [ << parameters.classic_build >> == 'true' ]; then
              mkdir -p $HOME/local # installation location
              ./configure
              cd src/clib
              make clean
              make machine-linux-gnu
              if [ << parameters.omp >> == 'true' ]; then
                make omp-on
              fi
              make
              make install
              cd ../python
              pip install -e .[dev]
            else # this branch builds grackle with cmake

              cmake -DGRACKLE_USE_DOUBLE=ON                   \
                    -DBUILD_SHARED_LIBS=ON                    \
                    -DGRACKLE_USE_OPENMP=<< parameters.omp >> \
                    -DCMAKE_INSTALL_PREFIX=$HOME/local        \
                    -Bbuild
              cmake --build build
              cmake --install build

              cd src/python
              PYGRACKLE_CMAKE_BUILD_DIR=../../build pip install -e .[dev]
            fi

  install-docs-dependencies:
    description: "Install dependencies for docs build."
    steps:
      - run:
          name: "Install dependencies for docs build."
          command: |
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install sphinx sphinx-tabs sphinx_rtd_theme

  download-test-data:
    description: "Download test data."
    steps:
      - run:
          name: "Download test data."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            mkdir -p $YT_DATA_DIR
            cd $YT_DATA_DIR
            wget --quiet http://yt-project.org/data/IsolatedGalaxy.tar.gz
            tar xzf IsolatedGalaxy.tar.gz
            rm IsolatedGalaxy.tar.gz

  run-tests:
    description: "Run all tests."
    parameters:
      omp:
        type: enum
        default: 'false'
        enum: ['true', 'false']
      classic_build:
        type: enum
        default: 'true'
        enum: ['true', 'false']
    steps:
      - run:
          name: "Run all tests."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            cd src
            if [ << parameters.classic_build >> == 'true' ]; then
              export PYTEST_CODE_LINK_CHOICE="classic"
            else
              export PYTEST_CODE_LINK_CHOICE="cmake:../build"
            fi
            if [ << parameters.omp >> == 'true' ]; then
              export OMP_NUM_THREADS=4
              py.test python/tests/test_code_examples.py
              cd example
              make cxx_omp_example
              ./cxx_omp_example
              make clean
            else
              py.test python/tests
            fi

  build-docs:
    description: "Test the docs build."
    steps:
      - run:
          name: "Test the docs build."
          command: |
            source $HOME/venv/bin/activate
            cd doc/source
            python -m sphinx -M html "." "_build" -W

executors:
  python:
    parameters:
      tag:
        type: string
        default: latest
    docker:
      - image: cimg/python:<< parameters.tag >>

jobs:
  test-suite:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/grackle

    steps:
      - checkout
      - set-env
      - install-dependencies
      - lint
      - download-test-data

      - install-grackle:
          omp: 'false'
          classic_build: 'true'

      - run-tests:
          omp: 'false'
          classic_build: 'true'

      - install-grackle:
          omp: 'true'
          classic_build: 'true'

      - run-tests:
          omp: 'true'
          classic_build: 'true'

      - install-grackle:
          omp: 'false'
          classic_build: 'false'

      - run-tests:
          omp: 'false'
          classic_build: 'false'

  docs-build:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/grackle

    steps:
      - checkout
      - install-docs-dependencies
      - build-docs

workflows:
   version: 2

   tests:
     jobs:
       - test-suite:
           name: "Python 3.8 tests"
           tag: "3.8.14"

       - docs-build:
           name: "Docs build"
           tag: "3.8.14"

   weekly:
     triggers:
       - schedule:
           cron: "0 0 * * 1"
           filters:
            branches:
              only:
                - main
     jobs:
       - test-suite:
           name: "Python 3.8 tests"
           tag: "3.8.14"

       - docs-build:
           name: "Docs build"
           tag: "3.8.14"
