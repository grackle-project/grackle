version: 2.1

commands:
  set-env:
    description: "Set environment variables."
    steps:
      - run:
          name: "Set environment variables."
          command: |
            echo "backend : Agg" > $HOME/matplotlibrc
            echo 'export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH' >> $BASH_ENV
            echo 'export YT_DATA_DIR=$HOME/yt_test' >> $BASH_ENV
            echo 'export MATPLOTLIBRC=$HOME' >> $BASH_ENV
            # get tags from the main and PR repository (for the current gold standard)
            git fetch --tags https://github.com/grackle-project/grackle
            if [ -n "$CIRCLE_PR_REPONAME" ]; then
              git fetch --tags https://github.com/$CIRCLE_PR_USERNAME/$CIRCLE_PR_REPONAME
            fi

  install-cmake-dependencies:
    description: "Install just the dependencies needed for a CMake build"
    steps:
      - run:
          name: "Install only the basic dependencies for a CMake build"
          command: |
            git submodule update --init --remote
            sudo apt update
            sudo apt install -y libhdf5-serial-dev gfortran ninja-build cmake

  install-dependencies:
    description: "Install dependencies."
    steps:
      - install-cmake-dependencies
      - run:
          name: "Install all other dependencies."
          command: |
            source $BASH_ENV
            # libtool-bin is a requirement of the classic build-system
            # castxml is a requirement of the pygrackle test-suite
            sudo apt install -y libtool-bin castxml
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install flake8

  lint:
    description: "Lint."
    steps:
      - run:
          name: "Lint."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            cd src/python
            flake8 pygrackle examples tests

  install-grackle:
    description: "Install grackle."
    parameters:
      omp:
        type: enum
        default: 'false'
        enum: ['true', 'false']
      classic_build:
        type: enum
        default: 'true'
        enum: ['true', 'false']
      tag:
        type: string
        default: $CIRCLE_BRANCH
    steps:
      - run:
          name: "Install grackle (classic_build: << parameters.classic_build >>, omp: << parameters.omp >>, tag: << parameters.tag >> )"
          command: |
            source $HOME/venv/bin/activate
            git checkout << parameters.tag >>

            # First, try resetting things to a pristine condition (in the event
            # that grackle was previously built
            # -> this is important if we want to perform a cmake build after
            #    a traditional build
            rm -rf $HOME/local # installation location
            ./configure # this is needed so we can call `make clean` (in the
                        # event that we haven't called ./configure since the
                        # last time we tried to do this sort of cleanup)
            cd src/clib
            make clean
            cd -
            cd src/python
            make clean
            cd -
            # remove the files produced by ./configure
            rm -f src/clib/Make.config.override src/clib/Make.config.machine src/clib/DEPEND
            # remove the files produced in a cmake-build
            rm -rf build


            # Next, we actually perform the installation
            if [ << parameters.classic_build >> == 'true' ]; then
              mkdir -p $HOME/local # installation location
              ./configure
              cd src/clib
              make clean
              make machine-linux-gnu
              if [ << parameters.omp >> == 'true' ]; then
                make omp-on
              fi
              make
              make install
              cd ../../ # go back to the root level

              if [ ! -f ./pyproject.toml ]; then
                # this is the old way to install pygrackle. 
                # - We need to support this as long as the most recent gold
                #   standard tags a version of the repository from before we
                #   transitioned away from setuptools
                # - previously, we checked the value held by parameters.tag,
                #   but that was less robust than the current solution

                cd src/python
                pip install -e .[dev]
              else
                PYGRACKLE_LEGACY_LINK=classic pip install -v -e .[dev]
              fi
            else # this branch builds grackle with cmake

              cmake -DGRACKLE_USE_DOUBLE=ON                   \
                    -DBUILD_SHARED_LIBS=ON                    \
                    -DGRACKLE_USE_OPENMP=<< parameters.omp >> \
                    -DCMAKE_INSTALL_PREFIX=$HOME/local        \
                    -Bbuild
              cmake --build build
              
              if [ ! -f ./pyproject.toml ]; then
                # this is the old way to install pygrackle. 
                # - We need to support this as long as the most recent gold
                #   standard tags a version of the repository from before we
                #   transitioned away from setuptools
                # - previously, we checked the value held by parameters.tag,
                #   but that was less robust than the current solution

                # we DO need a full installation of the c-library
                cmake --install build 

                cd src/python
                PYGRACKLE_CMAKE_BUILD_DIR=../../build pip install -e .[dev]
              else
                # we DO NOT need a full installation of the c-library
                #cmake --install build 
                Grackle_DIR=${PWD}/build pip install -v -e .[dev]
              fi
            fi

  install-standalone-pygrackle:
    description: "Install pygrackle without explicitly building the grackle library."
    parameters:
      tag:
        type: string
        default: $CIRCLE_BRANCH
    steps:
      - run:
          name: "Install pygrackle."
          command: |
            source $HOME/venv/bin/activate
            git checkout << parameters.tag >>
            pip install -e .[dev]

  install-docs-dependencies:
    description: "Install dependencies for docs build."
    steps:
      - run:
          name: "Install dependencies for docs build."
          command: |
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install sphinx sphinx-tabs sphinx_rtd_theme

  download-test-data:
    description: "Download test data."
    steps:
      - run:
          name: "Download test data."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            mkdir -p $YT_DATA_DIR
            cd $YT_DATA_DIR
            wget --quiet http://yt-project.org/data/IsolatedGalaxy.tar.gz
            tar xzf IsolatedGalaxy.tar.gz
            rm IsolatedGalaxy.tar.gz

  run-pygrackle-tests:
    description: "Run the pytest test-suite. This suite includes a mix of general tests and pygrackle-specific tests."
    parameters:
      omp:
        type: enum
        default: 'false'
        enum: ['true', 'false']
      build_kind:
        type: enum
        default: 'classic'
        enum: ['classic', 'cmake', 'standalone-pygrackle']
      generate:
        type: enum
        default: 'true'
        enum: ['true', 'false']
    steps:
      - run:
          name: "Run the pytest test-suite (build_kind: << parameters.build_kind >>, omp: << parameters.omp >>, generate: << parameters.generate >>)."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            cd src

            # actually execute the tests
            if [[ << parameters.build_kind >> == 'classic' &&
                  << parameters.omp >> == 'true' ]]; then
              echo "the pygrackle tests can't be run in this configuration"

            elif [ ! -f ./python/tests/conftest.py ]; then
              # NOTE: these tests should run if using OpenMP without the
              #       classic build-system

              # here we use the old way to control the answer-test mode (i.e.
              # defining environment variables)
              # - We can stop supporting this case once the most recent gold
              #   standard tags a repository version containing conftest.py
              if [ << parameters.generate >> == 'true' ]; then
                export GENERATE_PYGRACKLE_TEST_RESULTS=1
              else
                export GENERATE_PYGRACKLE_TEST_RESULTS=0
              fi
              py.test python/tests

            else
              # NOTE: these tests should run if using OpenMP without the
              #       classic build-system

              # ANSWER_DIR was picked to ensure that it matches up with the old
              # hardcoded location (we can change it once the most recent gold
              # standard tags a repository version containing conftest.py)
              ANSWER_DIR=./python/tests/test_answers
              if [ << parameters.generate >> == 'true' ]; then
                py.test --answer-dir=${ANSWER_DIR} --answer-store python/tests
              else
                py.test --answer-dir=${ANSWER_DIR} python/tests
              fi
            fi

  run-classic-omp-test:
    description: "Run the OpenMP test with the classic build-system"
    steps:
      - run:
          name: "Run the OpenMP test with the classic build system"
          command: |
            source $BASH_ENV
            cd src
            export OMP_NUM_THREADS=4
            cd example
            make cxx_omp_example
            ./cxx_omp_example
            make clean

  build-docs:
    description: "Test the docs build."
    steps:
      - run:
          name: "Test the docs build."
          command: |
            source $HOME/venv/bin/activate
            cd doc/source
            python -m sphinx -M html "." "_build" -W

executors:
  python:
    parameters:
      tag:
        type: string
        default: latest
    docker:
      - image: cimg/python:<< parameters.tag >>

jobs:
  test-suite:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/grackle

    steps:
      - checkout
      - set-env
      - install-dependencies
      - lint
      - download-test-data

      - install-grackle:
          omp: 'false'
          classic_build: 'true'
          tag: $CIRCLE_BRANCH

      - run-pygrackle-tests:
          omp: 'false'
          build_kind: 'classic'
          generate: 'true'

      - install-grackle:
          omp: 'true'
          classic_build: 'true'
          tag: $CIRCLE_BRANCH

      - run-classic-omp-test

      - install-grackle:
          omp: 'false'
          classic_build: 'false'
          tag: gold-standard-v2

      - run-pygrackle-tests:
          omp: 'false'
          build_kind: 'cmake'
          generate: 'true'

      - install-grackle:
          omp: 'false'
          classic_build: 'false'
          tag: $CIRCLE_BRANCH

      - run-pygrackle-tests:
          omp: 'false'
          build_kind: 'cmake'
          generate: 'false'

# TODO: once we merge in GH-#208, we need to issue a new gold standard, and then we should
#       issue a followup PR where we uncomment the remainder of this test
  test-standalone-pygrackle:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/grackle

    steps:
      - checkout
      - set-env
      - install-dependencies
      - download-test-data
      #- install-standalone-pygrackle:
      #    tag: gold-standard-v2
      #- run-pygrackle-tests:
      #    omp: 'false'
      #    build_kind: 'standalone-pygrackle'
      #    generate: 'true'
      - install-standalone-pygrackle:
          tag: $CIRCLE_BRANCH
      #- run-pygrackle-tests:
      #    omp: 'false'
      #    build_kind: 'standalone-pygrackle'
      #    generate: 'false'

  corelib-tests:
    # we're only using a python docker-image out of convenience (We only care
    # that a version of python exists with a version of 3.7 or newer to run
    # our scripts).
    executor:
      name: python
      tag: 3.8.14

    working_directory: ~/grackle

    steps:
      - checkout
      - install-cmake-dependencies
      - run:
          name: "Build libgrackle and all of the core library's tests"
          command: |
            cmake -DGRACKLE_USE_DOUBLE=ON                   \
                  -DGRACKLE_USE_OPENMP=OFF                  \
                  -DGRACKLE_BUILD_TESTS=ON                  \
                  -DCMAKE_BUILD_TYPE=Release                \
                  -GNinja -Bbuild
            cmake --build build
      - run:
          name: "description: Run the suite of tests that operate directly on the core-library."
          command: |
            cd build
            ctest --output-on-failure

  docs-build:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/grackle

    steps:
      - checkout
      - install-docs-dependencies
      - build-docs

workflows:
   version: 2

   tests:
     jobs:
       - test-suite:
           name: "Pygrackle test suite - Python 3.8"
           tag: "3.8.14"

       - test-standalone-pygrackle:
           name: "Standalone Pygrackle tests - Python 3.8"
           tag: "3.8.14"

       - corelib-tests:
           name: "Core library test suite"

       - docs-build:
           name: "Docs build"
           tag: "3.8.14"

   weekly:
     triggers:
       - schedule:
           cron: "0 0 * * 1"
           filters:
            branches:
              only:
                - main
     jobs:
       - test-suite:
           name: "Pygrackle test suite - Python 3.8"
           tag: "3.8.14"

       - test-standalone-pygrackle:
           name: "Standalone Pygrackle tests - Python 3.8"
           tag: "3.8.14"

       - corelib-tests:
           name: "Core library test suite"

       - docs-build:
           name: "Docs build"
           tag: "3.8.14"
