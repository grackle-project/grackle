version: 2.1

commands:
  set-env:
    description: "Set environment variables."
    steps:
      - run:
          name: "Set environment variables."
          command: |
            echo "backend : Agg" > $HOME/matplotlibrc
            echo 'export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH' >> $BASH_ENV
            echo 'export YT_DATA_DIR=$HOME/yt_test' >> $BASH_ENV
            echo 'export MATPLOTLIBRC=$HOME' >> $BASH_ENV

  install-dependencies:
    description: "Install dependencies."
    steps:
      - run:
          name: "Install dependencies."
          command: |
            git submodule update --init --remote
            source $BASH_ENV
            sudo apt update
            sudo apt install -y python3.8 python3-pip libhdf5-serial-dev gfortran libtool-bin
            python3.8 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install flake8
            pip install packaging

  lint:
    description: "Lint."
    steps:
      - run:
          name: "Lint."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            cd src/python
            flake8 pygrackle examples tests

  install-grackle:
    description: "Install grackle."
    parameters:
      omp:
        type: string
        default: 'false'
    steps:
      - run:
          name: "Install grackle."
          command: |
            source $HOME/venv/bin/activate
            mkdir -p $HOME/local
            ./configure
            cd src/clib
            make clean
            make machine-linux-gnu
            if [ << parameters.omp >> == 'true' ]; then
              make omp-on
            fi
            make
            make install
            cd ../python
            pip install -e .[dev]

  install-docs-dependencies:
    description: "Install dependencies for docs build."
    steps:
      - run:
          name: "Install dependencies for docs build."
          command: |
            python3.8 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install sphinx

  download-test-data:
    description: "Download test data."
    steps:
      - run:
          name: "Download test data."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            mkdir -p $YT_DATA_DIR
            cd $YT_DATA_DIR
            wget --quiet http://yt-project.org/data/IsolatedGalaxy.tar.gz
            tar xzf IsolatedGalaxy.tar.gz
            rm IsolatedGalaxy.tar.gz

  run-tests:
    description: "Run all tests."
    parameters:
      omp:
        type: string
        default: 'false'
    steps:
      - run:
          name: "Run all tests."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            cd src
            if [ << parameters.omp >> == 'true' ]; then
              export OMP_NUM_THREADS=4
              py.test python/tests/test_code_examples.py
              cd example
              make cxx_omp_example
              ./cxx_omp_example
            else
              py.test python/tests
            fi

  build-docs:
    description: "Test the docs build."
    steps:
      - run:
          name: "Test the docs build."
          command: |
            source $HOME/venv/bin/activate
            cd doc/source
            python -m sphinx -M html "." "_build" -W

executors:
  python:
    parameters:
      tag:
        type: string
        default: latest
    machine:
      image: ubuntu-2204:current

jobs:
  test-suite:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>


    resource_class: large

    working_directory: ~/grackle

    steps:
      - checkout
      - set-env
      - install-dependencies
      - lint
      - download-test-data

      - install-grackle:
          omp: 'false'

      - run-tests:
          omp: 'false'

      - install-grackle:
          omp: 'true'

      - run-tests:
          omp: 'true'

  docs-build:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/grackle

    steps:
      - checkout
      - install-docs-dependencies
      - build-docs

workflows:
   version: 2

   tests:
     jobs:
       - test-suite:
           name: "Python 3.8 tests"
           tag: "3.8.14"

       - docs-build:
           name: "Docs build"
           tag: "3.8.14"

   weekly:
     triggers:
       - schedule:
           cron: "0 0 * * 1"
           filters:
            branches:
              only:
                - master
     jobs:
       - test-suite:
           name: "Python 3.8 tests"
           tag: "3.8.14"

       - docs-build:
           name: "Docs build"
           tag: "3.8.14"
