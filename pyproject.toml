# NOTE: scikit-build-core doesn't use the root-level CMakeLists.txt file,
#       instead we have it use src/python/CMakeLists.txt.
#
# There are 2 reasons for placing this at the root-level directory
# (rather than in src/python):
#   1. it ensures that the source-distribution of our source-directory and the
#      SDist we'll eventually distribute via PyPI will have the same structure
#   2. it ensures that pygrackle can be installable by invoking
#      pip install pygrackle @ git+https://github.com/grackle-project/grackle

[build-system]
requires=[
  "cython",
  "cython-cmake>=0.2",
  # since tool.scikit-build.minimum-version is set to "build-system.requires",
  # the minimum build-requirement for scikit-build-core controls some default
  # behaviors when newer versions of scikit-build-core are installed
  # (we should keep an eye on this and keep increasing it over time)
  "scikit-build-core>=0.10"
]
build-backend = "scikit_build_core.build"

[project]
name = "pygrackle"
description = "A wrapper for the Grackle chemistry library"
# A simpler project could infer used to infer the version number from git:
#    https://scikit-build-core.readthedocs.io/en/latest/configuration.html#dynamic-metadata
# but pygrackle can't (currently) do this since it lives in a "monorepo"
#    https://github.com/pypa/setuptools_scm/issues/1056
version = "1.1.1.dev0"
classifiers=[
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Astronomy",
  "License :: OSI Approved :: BSD License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
keywords=[
  "simulation", "chemistry", "cooling", "astronomy", "astrophysics"
]
requires-python = ">=3.7"
dependencies = [
  'h5py',
  'numpy',
  'matplotlib',
  'yt>=4.0.2'
]

[project.license]
text = "BSD 3-Clause"

[project.urls]
Homepage = 'https://github.com/grackle-project/grackle'
Documentation = 'https://grackle.readthedocs.io/'
Source = 'https://github.com/grackle-project/grackle'
Tracker = 'https://github.com/grackle-project/grackle/issues'

[project.optional-dependencies]
# currently the next line duplicates the dependency-groups purely for
# historical reasons. We should delete the following entry in the near-future
# (since they are actually dependencies of the pygrackle-wheel).
dev = ['flake8', 'packaging', 'pytest', 'sphinx', 'sphinx-tabs', 'furo']

[dependency-groups]
docs = ['sphinx', 'sphinx-tabs', 'furo']
test = ['pytest', 'packaging']
dev = ['flake8', {include-group = "docs"}, {include-group = 'test'}]

[tool.pytest.ini_options]
# settings inspired by: learn.scientific-python.org/development/guides/pytest/
#  -ra: The -r tells pytest to report extra test summary info on the events
#       corresponding to all characters following the r. Here, the "a"
#       corresponds to "all" events (other than passing tests)
#  --showlocals: directs pytest to show local variables in tracebacks
#  --strict-markers: ensures we don't try to use an unspecified fixture
#  --string-config: all configuration mistakes are reported as errors
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
# by default, we treat any test marked xfail that doesn't fail as an error
# (we can override this locally, if necessary)
xfail_strict = true
# limit the directories searched by pytests for the test files
testpaths = [
  "src/python/tests",
]


[tool.scikit-build]
# redirect to the appropriate CMakeLists.txt file
cmake.source-dir = "./src/python"

# if the version of CMake (in {cmake.source-dir}/CMakeLists.txt) isn't found,
# scikit-build-core will download and use a compatible CMake-verison
cmake.version = "CMakeLists.txt"

# The build type to use when building the project. Valid options are: "Debug",
# "Release", "RelWithDebInfo", "MinSizeRel", "", etc.
cmake.build-type = "Release"

# since this is set, this provides a method for backward compatibility.
minimum-version = "build-system.requires"

# The following are all packaging-related and may require tweaking

# Files to exclude from the SDist (even if they're included by default).
# Supports gitignore syntax.
sdist.exclude = [
    # exclude continuous integration:
    ".circleci", ".readthedocs.yml", ".github",
    # exclude files related to creating precompiled wheels
    "scripts/wheels",
    # exclude data files since we want the sdist to follow the same rules as wheels
    # when it comes to data file distribution (for simplicity).
    # -> the main value of including the files would be if somebody wanted to download
    #    the sdist, untar it, and run tests. But, I would argue that they should be
    #    cloning the git repository for that purpose
    # -> this would also make the sdist ~65 times bigger
    "input", "grackle_data_files",
    # if we aren't including data-files, there's no reason to include pygrackle-tests
    # (all meaningful tests will currently fail)
    "src/python/tests",
    # if we aren't including data-files, there's no reason to include the pygrackle
    # code examples (they currently require editable installations)
    "src/python/examples",
    # for consistency, we exclude the core-library tests and examples
    "tests", "src/examples",
    # exclude miscellaneous classic-build-system machinery
    "configure", "src/Makefile", "src/examples/Make*", "src/clib/Make*"
]

# A list of packages to auto-copy into the wheel.
wheel.packages = ["./src/python/pygrackle"]

# A set of patterns to exclude from the wheel. This is additive to the SDist
# exclude patterns.
wheel.exclude = [
    # Per the discussion in gh-220, we have decided not to package pyd files
    # (at least for right now)
    "**.pyd",
    # No need to package template files
    "**.py.in"
]


[tool.cibuildwheel]
build = "cp310-*"  # <- FIXME: "cp310-* cp311-* cp312-* cp313-*"
# we compile high-level hdf5 api purely so we can run the test-command on musllinux
# -> h5py doesn't ship binary-wheels for that platform
# -> depending on how long h5py takes to compile, it may be better to simply use
#    test-skip = "*-musllinux*"
before-build = "python {project}/scripts/wheels/cibw_before_build.py --compile-hl-h5 3rdparty {project}"
# once we deal with removing the editable-install requirement, we should use:
test-groups = "test"  # <- this installs the test dependencies
#test-command = "pytest -c {project}/pyproject.toml --color=yes {project}"
test-command = "cd {project} && pytest --color=yes"

[tool.cibuildwheel.linux]
archs = "x86_64"
