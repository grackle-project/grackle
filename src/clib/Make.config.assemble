#-----------------------------------------------------------------------
#
# This make include file is used for assigning appropriate values to
# the following variables given CONFIG_* and MACH_* variables:
#
# Compilers
#
#    CPP                C preprocessor
#    CC                 C compiler
#    CXX                C++ compiler
#    FC                 Fortran 77 compiler
#    F90                Fortran 90 compiler
#    LD                 Linker 
# 
# Compiler flags
#
#    CPPFLAGS           Flags for the C preprocessor
#    CFLAGS             Flags for the C compiler
#    CXXFLAGS           Flags for the C++ compiler
#    FFLAGS             Flags for the Fortran 77 compiler
#    F90FLAGS           Flags for the Fortran 90 compiler
#    LDFLAGS            Flags for the Linker      
#                      
# Preprocessor defines
#
#    DEFINES            Preprocessor defines for C, C++, and Fortran
#
# Object files
#
#    OBJS              List of all object files to compile
#    OBJS_LIB          Same list, without X_Main.o
#
#
# Libraries
#
#    LIBS              List of all libraries to link
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# DETERMINE BARYON FIELD PRECISION SETTINGS
#-----------------------------------------------------------------------

    ERROR_PRECISION = 1

    # Settings for 32-bit floating point baryon precision

    ifeq ($(CONFIG_PRECISION),32)
        ERROR_PRECISION = 0
        ASSEMBLE_PRECISION_NUMBER = 4
    endif

    # Settings for 64-bit floating point baryon precision

    ifeq ($(CONFIG_PRECISION),64)
        ERROR_PRECISION = 0
        ASSEMBLE_PRECISION_NUMBER = 8
    endif

    # error if CONFIG_PRECISION is incorrect

    ifeq ($(ERROR_PRECISION),1)
       .PHONY: error_precision
       error_precision:
	$(error Illegal value '$(CONFIG_PRECISION)' for $$(CONFIG_PRECISION))
    endif

    PRECISION_DEFINE = GRACKLE_FLOAT_$(ASSEMBLE_PRECISION_NUMBER)

#=======================================================================
# COMPILERS
#=======================================================================

    ASSEMBLE_CPP = $(MACH_CPP)

    # compilers and settings

    ASSEMBLE_CC  = $(MACH_CC_NOMPI)
    ASSEMBLE_CXX = $(MACH_CXX_NOMPI)
    ASSEMBLE_FC  = $(MACH_FC_NOMPI)
    ASSEMBLE_F90 = $(MACH_F90_NOMPI)
    ASSEMBLE_LD = $(MACH_LD_NOMPI)
    ASSEMBLE_LIBTOOL = $(MACH_LIBTOOL)

#-----------------------------------------------------------------------
# DETERMINE OPTIMIZATION LEVEL SETTINGS
#-----------------------------------------------------------------------

    ERROR_OPT = 1

    # Settings for verbose warnings 

    ifeq ($(CONFIG_OPT),warn)
        ERROR_OPT = 0
        ASSEMBLE_OPT_FLAGS = $(MACH_OPT_WARN)
    endif

    # Settings for debugging

    ifeq ($(CONFIG_OPT),debug)
        ERROR_OPT = 0
        ASSEMBLE_OPT_FLAGS = $(MACH_OPT_DEBUG)
    endif

    # Settings for debugging CUDA

    ifeq ($(CONFIG_OPT),cudadebug)
        ERROR_OPT = 0
        ASSEMBLE_OPT_FLAGS = $(MACH_OPT_DEBUG)
        ASSEMBLE_CUDAFLAGS = $(MACH_OPT_CUDADEBUG)
	ASSEMBLE_CUDADEBUG_DEFINES = -DECUDADEBUG
    endif

    # Settings for high conservative optimization

    ifeq ($(CONFIG_OPT),high)
        ERROR_OPT = 0
        ASSEMBLE_OPT_FLAGS = $(MACH_OPT_HIGH)
    endif

    # Settings for aggressive optimization

    ifeq ($(CONFIG_OPT),aggressive)
        ERROR_OPT = 0
        ASSEMBLE_OPT_FLAGS = $(MACH_OPT_AGGRESSIVE)
    endif

    # error if CONFIG_OPT is incorrect

    ifeq ($(ERROR_OPT),1)
       .PHONY: error_opt
       error_opt:
	$(error Illegal value '$(CONFIG_OPT)' for $$(CONFIG_OPT))
    endif

#-----------------------------------------------------------------------
# DETERMINE OPENMP SUPPORT
#-----------------------------------------------------------------------

    ERROR_OMP = 1

    # Settings for enabling OpenMP

    ifeq ($(CONFIG_OMP),on)
        ERROR_OMP = 0
        ASSEMBLE_OMP_FLAGS = $(MACH_OMPFLAGS)
    endif

    # Settings for disabling OpenMP

    ifeq ($(CONFIG_OMP),off)
        ERROR_OMP = 0
        ASSEMBLE_OMP_FLAGS =
    endif

    # error if CONFIG_OMP is incorrect

    ifeq ($(ERROR_OMP),1)
       .PHONY: error_omp
       error_omp:
	$(error Illegal value '$(CONFIG_OMP)' for $$(CONFIG_OMP))
    endif

#=======================================================================
# ASSIGN ALL OUTPUT VARIABLES
#=======================================================================

    CPP      = $(ASSEMBLE_CPP)
    CC       = $(ASSEMBLE_CC)
    CXX      = $(ASSEMBLE_CXX)
    FC       = $(ASSEMBLE_FC)
    F90      = $(ASSEMBLE_F90)
    LD       = $(ASSEMBLE_LD)
    LIBTOOL  = $(ASSEMBLE_LIBTOOL)
    CUDACOMPILER = $(ASSEMBLE_CUDACOMPILER)
    CUDACOMPFLAGS = $(ASSEMBLE_CUDAFLAGS)

    CPPFLAGS = $(MACH_CPPFLAGS)
    CFLAGS   = $(MACH_CFLAGS) \
               $(ASSEMBLE_OPT_FLAGS) \
               $(ASSEMBLE_OMP_FLAGS)
    CXXFLAGS = $(MACH_CXXFLAGS) \
               $(ASSEMBLE_OPT_FLAGS) \
               $(ASSEMBLE_OMP_FLAGS)
    FFLAGS   = $(MACH_FFLAGS) \
               $(ASSEMBLE_OPT_FLAGS) \
               $(ASSEMBLE_OMP_FLAGS)
    F90FLAGS = $(MACH_F90FLAGS) \
               $(ASSEMBLE_OPT_FLAGS) \
               $(ASSEMBLE_OMP_FLAGS)
    LDFLAGS  = $(MACH_LDFLAGS) \
               $(ASSEMBLE_LDFLAGS)
    LDOUTPUT_FLAGS = $(ASSEMBLE_LDOUTPUT_FLAGS)

    DEFINES = $(MACH_DEFINES) \
              $(ASSEMBLE_IO_DEFINES)

    PUBLIC_HEADER_SRCDIR = $(GRACKLE_DIR)/../include
    AUTOGEN_DIR = $(GRACKLE_DIR)/autogen

    BUILD_INCLUDES = -I$(PUBLIC_HEADER_SRCDIR) -I$(AUTOGEN_DIR)

    INCLUDES = $(MACH_INCLUDES) \
               $(MAKEFILE_INCLUDES) \
               $(BUILD_INCLUDES)

    OBJS_LIB = $(OBJS_CONFIG_LIB)

    LIBS = $(MACH_LIBS)

#=======================================================================
# INSTALLATION TARGETS
#=======================================================================

    INSTALL_LIB_DIR = $(DEFAULT_INSTALL_PREFIX)/lib
    INSTALL_INCLUDE_DIR = $(DEFAULT_INSTALL_PREFIX)/include

    ifdef MACH_INSTALL_PREFIX
	INSTALL_LIB_DIR = $(MACH_INSTALL_PREFIX)/lib
	INSTALL_INCLUDE_DIR = $(MACH_INSTALL_PREFIX)/include
    endif

    ifdef MACH_INSTALL_LIB_DIR
    	INSTALL_LIB_DIR = $(MACH_INSTALL_LIB_DIR)
    endif

    ifdef MACH_INSTALL_INCLUDE_DIR
    	INSTALL_INCLUDE_DIR = $(MACH_INSTALL_INCLUDE_DIR)
    endif
