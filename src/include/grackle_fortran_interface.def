!=======================================================================
!
!
! Grackle fortran variable types
!
!
! Copyright (c) 2013, Enzo/Grackle Development Team.
!
! Distributed under the terms of the Enzo Public Licence.
!
! The full license is in the file LICENSE, distributed with this 
! software.
!=======================================================================

c This file provides a FORTRAN interface to the grackle 3.0 API based
c   on C structs.  The following defines the three C structs that grackle
c   uses to pass data.  These must *exactly* match the corresponding C 
c   definitions in grackle_types.h and grackle_chemistry_data.h.
c
c In addition, here we define the Fortran 90 interfaces to the C routines
c   using the 2003 Fortran C interoperability features.  Note that some
c   care must be taken defining matching types.

c     This is the fortran definition of grackle_units

      TYPE, BIND(C) :: grackle_units
         INTEGER(C_INT) :: comoving_coordinates
         REAL(C_DOUBLE) :: density_units
         REAL(C_DOUBLE) :: length_units
         REAL(C_DOUBLE) :: time_units
         REAL(C_DOUBLE) :: velocity_units
         REAL(C_DOUBLE) :: a_units
         REAL(C_DOUBLE) :: a_value
      END TYPE

c     This is the fortran definition of grackle_field_data

      TYPE, BIND(C) :: grackle_field_data
         INTEGER(C_INT) :: grid_rank
         TYPE(C_PTR) :: grid_dimension
         TYPE(C_PTR) :: grid_start
         TYPE(C_PTR) :: grid_end
         REAL(C_DOUBLE) :: grid_dx

         TYPE(C_PTR) :: density
         TYPE(C_PTR) :: internal_energy
         TYPE(C_PTR) :: x_velocity
         TYPE(C_PTR) :: y_velocity
         TYPE(C_PTR) :: z_velocity
         TYPE(C_PTR) :: metal_density
         TYPE(C_PTR) :: dust_density
         TYPE(C_PTR) :: e_density
         TYPE(C_PTR) :: HI_density
         TYPE(C_PTR) :: HII_density
         TYPE(C_PTR) :: HeI_density
         TYPE(C_PTR) :: HeII_density
         TYPE(C_PTR) :: HeIII_density
         TYPE(C_PTR) :: HM_density
         TYPE(C_PTR) :: H2I_density
         TYPE(C_PTR) :: H2II_density
         TYPE(C_PTR) :: DI_density
         TYPE(C_PTR) :: DII_density
         TYPE(C_PTR) :: HDI_density
         TYPE(C_PTR) :: DM_density
         TYPE(C_PTR) :: HDII_density
         TYPE(C_PTR) :: HeHII_density
         TYPE(C_PTR) :: CI_density
         TYPE(C_PTR) :: CII_density
         TYPE(C_PTR) :: CO_density
         TYPE(C_PTR) :: CO2_density
         TYPE(C_PTR) :: OI_density
         TYPE(C_PTR) :: OH_density
         TYPE(C_PTR) :: H2O_density
         TYPE(C_PTR) :: O2_density
         TYPE(C_PTR) :: SiI_density
         TYPE(C_PTR) :: SiOI_density
         TYPE(C_PTR) :: SiO2I_density
         TYPE(C_PTR) :: CH_density
         TYPE(C_PTR) :: CH2_density
         TYPE(C_PTR) :: COII_density
         TYPE(C_PTR) :: OII_density
         TYPE(C_PTR) :: OHII_density
         TYPE(C_PTR) :: H2OII_density
         TYPE(C_PTR) :: H3OII_density
         TYPE(C_PTR) :: O2II_density
         TYPE(C_PTR) :: Mg_density
         TYPE(C_PTR) :: Al_density
         TYPE(C_PTR) :: S_density
         TYPE(C_PTR) :: Fe_density
         TYPE(C_PTR) :: MgSiO3_dust_density
         TYPE(C_PTR) :: AC_dust_density
         TYPE(C_PTR) :: SiM_dust_density
         TYPE(C_PTR) :: FeM_dust_density
         TYPE(C_PTR) :: Mg2SiO4_dust_density
         TYPE(C_PTR) :: Fe3O4_dust_density
         TYPE(C_PTR) :: SiO2_dust_density
         TYPE(C_PTR) :: MgO_dust_density
         TYPE(C_PTR) :: FeS_dust_density
         TYPE(C_PTR) :: Al2O3_dust_density
         TYPE(C_PTR) :: ref_org_dust_density
         TYPE(C_PTR) :: vol_org_dust_density
         TYPE(C_PTR) :: H2O_ice_dust_density
         TYPE(C_PTR) :: local_ISM_metal_density
         TYPE(C_PTR) :: ccsn13_metal_density
         TYPE(C_PTR) :: ccsn20_metal_density
         TYPE(C_PTR) :: ccsn25_metal_density
         TYPE(C_PTR) :: ccsn30_metal_density
         TYPE(C_PTR) :: fsn13_metal_density
         TYPE(C_PTR) :: fsn15_metal_density
         TYPE(C_PTR) :: fsn50_metal_density
         TYPE(C_PTR) :: fsn80_metal_density
         TYPE(C_PTR) :: pisn170_metal_density
         TYPE(C_PTR) :: pisn200_metal_density
         TYPE(C_PTR) :: y19_metal_density
         TYPE(C_PTR) :: volumetric_heating_rate
         TYPE(C_PTR) :: specific_heating_rate
         TYPE(C_PTR) :: temperature_floor
         TYPE(C_PTR) :: RT_heating_rate
         TYPE(C_PTR) :: RT_HI_ionization_rate
         TYPE(C_PTR) :: RT_HeI_ionization_rate
         TYPE(C_PTR) :: RT_HeII_ionization_rate
         TYPE(C_PTR) :: RT_H2_dissociation_rate
         TYPE(C_PTR) :: RT_HDI_dissociation_rate
         TYPE(C_PTR) :: RT_CI_ionization_rate
         TYPE(C_PTR) :: RT_OI_ionization_rate
         TYPE(C_PTR) :: RT_CO_dissociation_rate
         TYPE(C_PTR) :: RT_OH_dissociation_rate
         TYPE(C_PTR) :: RT_H2O_dissociation_rate
         TYPE(C_PTR) :: H2_self_shielding_length
         TYPE(C_PTR) :: H2_custom_shielding_factor
         TYPE(C_PTR) :: isrf_habing
         TYPE(C_PTR) :: SiM_dust_temperature
         TYPE(C_PTR) :: FeM_dust_temperature
         TYPE(C_PTR) :: Mg2SiO4_dust_temperature
         TYPE(C_PTR) :: MgSiO3_dust_temperature
         TYPE(C_PTR) :: Fe3O4_dust_temperature
         TYPE(C_PTR) :: AC_dust_temperature
         TYPE(C_PTR) :: SiO2_dust_temperature
         TYPE(C_PTR) :: MgO_dust_temperature
         TYPE(C_PTR) :: FeS_dust_temperature
         TYPE(C_PTR) :: Al2O3_dust_temperature
         TYPE(C_PTR) :: ref_org_dust_temperature
         TYPE(C_PTR) :: vol_org_dust_temperature
         TYPE(C_PTR) :: H2O_ice_dust_temperature
      END TYPE

c     This is the fortran definition of grackle_chemistry_data

      TYPE, BIND(C) :: grackle_chemistry_data
         INTEGER(C_INT) :: use_grackle
         INTEGER(C_INT) :: with_radiative_cooling
         INTEGER(C_INT) :: primordial_chemistry
         INTEGER(C_INT) :: dust_chemistry
         INTEGER(C_INT) :: metal_cooling
         REAL(C_DOUBLE) :: tabulated_cooling_minimum_temperature
         INTEGER(C_INT) :: UVbackground
         TYPE(C_PTR)    :: grackle_data_file
         INTEGER(C_INT) :: cmb_temperature_floor
         REAL(C_DOUBLE) :: Gamma
         INTEGER(C_INT) :: h2_on_dust
         INTEGER(C_INT) :: use_dust_density_field
         INTEGER(C_INT) :: dust_recombination_cooling
         INTEGER(C_INT) :: metal_chemistry
         INTEGER(C_INT) :: grain_growth
         INTEGER(C_INT) :: multi_metals
         INTEGER(C_INT) :: metal_abundances
         INTEGER(C_INT) :: dust_species
         INTEGER(C_INT) :: use_multiple_dust_temperatures
         INTEGER(C_INT) :: dust_sublimation
         INTEGER(C_INT) :: photoelectric_heating
         REAL(C_DOUBLE) :: photoelectric_heating_rate
         INTEGER(C_INT) :: use_isrf_field
         REAL(C_DOUBLE) :: interstellar_radiation_field
         INTEGER(C_INT) :: use_volumetric_heating_rate
         INTEGER(C_INT) :: use_specific_heating_rate
         INTEGER(C_INT) :: use_temperature_floor
         REAL(C_DOUBLE) :: temperature_floor_scalar
         INTEGER(C_INT) :: h2_cooling_rate
         INTEGER(C_INT) :: hd_cooling_rate
         INTEGER(C_INT) :: three_body_rate
         INTEGER(C_INT) :: cie_cooling
         INTEGER(C_INT) :: h2_optical_depth_approximation
         INTEGER(C_INT) :: ih2co
         INTEGER(C_INT) :: ipiht
         REAL(C_DOUBLE) :: HydrogenFractionByMass
         REAL(C_DOUBLE) :: DeuteriumToHydrogenRatio
         REAL(C_DOUBLE) :: SolarMetalFractionByMass
         REAL(C_DOUBLE) :: local_dust_to_gas_ratio
         INTEGER(C_INT) :: NumberOfTemperatureBins
         INTEGER(C_INT) :: CaseBRecombination
         REAL(C_DOUBLE) :: TemperatureStart
         REAL(C_DOUBLE) :: TemperatureEnd
         INTEGER(C_INT) :: NumberOfDustTemperatureBins
         REAL(C_DOUBLE) :: DustTemperatureStart
         REAL(C_DOUBLE) :: DustTemperatureEnd
         INTEGER(C_INT) :: Compton_xray_heating
         INTEGER(C_INT) :: LWbackground_sawtooth_suppression
         REAL(C_DOUBLE) :: LWbackground_intensity
         REAL(C_DOUBLE) :: UVbackground_redshift_on
         REAL(C_DOUBLE) :: UVbackground_redshift_off
         REAL(C_DOUBLE) :: UVbackground_redshift_fullon
         REAL(C_DOUBLE) :: UVbackground_redshift_drop
         REAL(C_DOUBLE) :: cloudy_electron_fraction_factor
         INTEGER(C_INT) :: use_radiative_transfer
         INTEGER(C_INT) :: radiative_transfer_coupled_rate_solver
         INTEGER(C_INT) :: radiative_transfer_intermediate_step
         INTEGER(C_INT) :: radiative_transfer_hydrogen_only
         INTEGER(C_INT) :: radiative_transfer_HDI_dissociation
         INTEGER(C_INT) :: radiative_transfer_metal_ionization
         INTEGER(C_INT) :: radiative_transfer_metal_dissociation
         INTEGER(C_INT) :: radiative_transfer_use_H2_shielding
         INTEGER(C_INT) :: self_shielding_method
         INTEGER(C_INT) :: H2_self_shielding
         INTEGER(C_INT) :: H2_custom_shielding
         INTEGER(C_INT) :: h2_charge_exchange_rate
         INTEGER(C_INT) :: h2_dust_rate
         INTEGER(C_INT) :: h2_h_cooling_rate
         INTEGER(C_INT) :: collisional_excitation_rates
         INTEGER(C_INT) :: collisional_ionisation_rates
         INTEGER(C_INT) :: recombination_cooling_rates
         INTEGER(C_INT) :: bremsstrahlung_cooling_rates
         INTEGER(C_INT) :: use_primordial_continuum_opacity
         INTEGER(C_INT) :: hd_reaction_rates
         INTEGER(C_INT) :: gas_grain_cooling_rate
         INTEGER(C_INT) :: uniform_grain_isrf_heating_rate
         INTEGER(C_INT) :: max_iterations
         INTEGER(C_INT) :: exit_after_iterations_exceeded
cc       INTEGER(C_INT) :: omp_nthreads // not supported in fortran
      END TYPE

c     The following define the fortran interfaces to the C routines

      INTERFACE
         REAL(C_DOUBLE) FUNCTION get_temperature_units(my_units)
     &        bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
         END FUNCTION get_temperature_units
      END INTERFACE

      INTERFACE
         REAL(C_DOUBLE) FUNCTION get_velocity_units(my_units)
     &        bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
         END FUNCTION get_velocity_units
      END INTERFACE

      INTERFACE
         SUBROUTINE set_velocity_units(my_units) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(INOUT) :: my_units
         END SUBROUTINE set_velocity_units
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION set_default_chemistry_parameters
     &        (my_grackle) bind(C)
            IMPORT
            TYPE(grackle_chemistry_data), INTENT(INOUT) :: my_grackle
         END FUNCTION set_default_chemistry_parameters
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION initialize_chemistry_data(my_units) 
     &        bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(INOUT) :: my_units
         END FUNCTION initialize_chemistry_data
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION solve_chemistry
     &        (my_units, my_fields, dt) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), VALUE, INTENT(IN) :: dt
         END FUNCTION solve_chemistry
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION calculate_cooling_time(my_units, 
     &        my_fields, cooling_time) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(OUT) :: cooling_time(*)
         END FUNCTION calculate_cooling_time
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION calculate_temperature(my_units, 
     &        my_fields, temperature) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(OUT) :: temperature(*)
         END FUNCTION calculate_temperature
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION calculate_pressure(my_units, my_fields, 
     &        pressure) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(OUT) :: pressure(*)
         END FUNCTION calculate_pressure
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION calculate_gamma(my_units, my_fields, 
     &        gamma) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(OUT) :: gamma(*)
         END FUNCTION calculate_gamma
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION calculate_dust_temperature(my_units,
     &        my_fields, dust_temperature) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(OUT) :: dust_temperature(*)
         END FUNCTION calculate_dust_temperature
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION gr_initialize_field_data(my_fields)
     &        bind(C)
            IMPORT
            TYPE(grackle_field_data), INTENT(INOUT) :: my_fields
         END FUNCTION gr_initialize_field_data
      END INTERFACE
