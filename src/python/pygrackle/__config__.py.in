# Pygrackle's build system replaces __config__.py.in with __config__.py
# -> This practice was inspired by numpy and scipy
# -> everything other than __version__, is intended for internal purposes

from enum import Enum

__all__ = ["__version__"]

def _report_error(variable_name, nominal_value, allowed_vals=None):
    """A function used to nicely describe any problems with file generation"""

    if allowed_vals is None:
        allowed_value_descr = ""
    else:
        allowed_value_descr = (
            f"\n\nKnown allowed values include {allowed_vals!r}. Either the "
            "list of allowed values must be updated OR something went wrong."
        )

    # we use unicode escape sequence, \u0040, that python automatically
    # converts to the "at sign" to avoid unintentional substitutions
    raise RuntimeError(
        "There appears to have been an issue when pygrackle's build system "
        f"generated `{__file__}` from the `{__file__}.in` template file. In "
        f"particular, \u0040{variable_name}\u0040 was replaced with an "
        f"invalid value of '{nominal_value}'.{allowed_value_descr}"
    ) from None


# substitute in the version from pyproject.toml
__version__ = "@SKBUILD_PROJECT_VERSION_FULL@"
if (len(__version__) == 0) or __version__[0] == "@":
    _report_error("SKBUILD_PROJECT_VERSION_FULL", __version__)


def _is_editable_installation():
    """Returns whether pygrackle was built as an editable install"""
    state = r"@SKBUILD_STATE@"
    # allowed values are given by
    # https://scikit-build-core.readthedocs.io/en/latest/cmakelists.html#accessing-information
    known = ("sdist", "wheel", "editable", "metadata_wheel", "metadata_editable")
    # I'm not entirely sure how the internals of scikit-build-core work, but
    # it seems to related to the specific hook that the frontend (e.g. pip/uv)
    # invoked. It seems unlikely that we'll see "metadata_..." in this file
    if state not in known:
        _report_error("SKBUILD_STATE", state, known)
    return 'editable' in state


# specifies how we consumed the grackle library
_GrackleBuild = Enum("_GrackleBuild", "ExternalClassic ExternalCMake Embedded")
try:
    _grackle_build = _GrackleBuild[r"@_PYGRACKLE_CONSUME_MODE@"]
except KeyError as err:
    _report_error("SKBUILD_STATE", err.args[0], list(_GrackleBuild.__members__))
