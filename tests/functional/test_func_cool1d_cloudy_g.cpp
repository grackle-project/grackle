#include "gtest/gtest.h"

extern "C" {
    #include "grackle_macros.h"
}


extern "C" void FORTRAN_NAME(cool1d_cloudy_g)(double* d, double* rhoH, double* metallicity,
                                              int* in, int* jn, int* kn, int* is, int* ie, int* j, int* k,
                                              double* logtem, double* edot, double* comp2, double* dom, double* zr,
                                              int* icmbTfloor, int* iClHeat, int* iZscale,
                                              long long* clGridRank, long long*  clGridDim,
                                              double* clPar1, double* clPar2, double* clPar3,
                                              long long* clDataSize, double* clCooling, double* clHeating, int* itmask);


TEST(FuncCool1DCloudyTest, Cool1DCloudyTest) {

    int in = 2;
    int jn = 2; // TODO: not used in the subroutine, remove?
    int kn = 2; // TODO: not used in the subroutine, remove?
    int is = 0;
    int ie = in - 1;
    int j = 1; // TODO: not used in the subroutine, remove?
    int k = 1; // TODO: not used in the subroutine, remove?

    
    double d[in*jn*kn]; // TODO: d is not used in the subroutine, remove?
    double logtem[in], rhoH[in], zr, dom, comp2; // Input parameters used as independent variables ("x"-like) for interpolation
    double metallicity[in]; // Used to scale cooling by metallicity
    double edot[in]; // Output parameter to be tested
    double edot_reference[in] = {-1.7392738707585668E+044, -1.7392738707585668E+044};

    // Grid descriptions
    long long clGridRank = 3;
    long long clGridDim[clGridRank] = {3,5,6}; 
    long long clDataSize = 90;//121394;
    double clPar1[clGridDim[0]] = {-10.0, -9.5, -9.0};
    double clPar2[clGridDim[1]] = {0.0, 0.12202000000000000, 0.25892999999999999,    
                                   0.41254000000000002, 0.58489000000000002};
/*                                    , 0.77827999999999997,
                                   0.99526000000000003, 1.2386999999999999, 1.5119000000000000, 
                                   1.8184000000000000, 2.1623000000000001, 2.5480999999999998, 
                                   2.9811000000000001, 3.4668000000000001, 4.0118999999999998, 
                                   4.6234000000000002, 5.3095999999999997, 6.0795000000000003, 
                                   6.9432999999999998, 7.9124999999999996, 9.0000000000000000, 
                                   10.220000000000001, 11.589000000000000, 13.125000000000000, 
                                   14.849000000000000, 14.849000000000000, 0.0000000000000000, 
                                   1.6304166312761136E-322, 1.1409191464908418E-310};
 */    
    double clPar3 [clGridDim[2]] = {1.0000000000000000, 1.0499998241554094, 1.0999998579423673,
                                    1.1500001400088755 ,1.1999999472615537, 1.2499998998595714};
/*                                     ,
                                    1.2999999314429707 ,1.3499999731188195, 1.3999999253938222,
                                    1.4500000105917006, 1.5000000466711041, 1.5500000131781912, 
                                    1.6000000321231420, 1.6500000076313377, 1.6999999708609113, 
                                    1.7499999805455702 , 1.7999999693838207, 1.8500000095796638, 
                                    1.8999999810146946, 1.9499999814179432, 2.0000000000000000, 
                                    2.0499998241554094, 2.0999998579423673, 2.1500001400088755, 
                                    2.1999999472615537, 2.2499998998595716};
 */
    double clCooling[clDataSize] = {33.435745212863388, 33.461567803779815, 33.487283203685813,
                                    33.512882907551599, 33.538362536990526, 33.563722813881540,
                                    33.588950075423966, 33.614071319684541, 33.639095094817435,
                                    33.664027424662677, 33.688867921893277, 33.713599179834944,
                                    33.738230769932755, 33.762754642700614, 33.787162134266410,
                                    33.811440943674157, 33.841653527094387, 33.865677635898635,
                                    33.892410889657604, 33.916201699233994, 33.939887061932779,
                                    33.984213245497315, 34.007827218274187, 34.031385481899605,
                                    34.054900076827266, 34.084662954809559, 34.108337313274255,
                                    34.131849657605571, 34.161030606844790, 34.182137420889092,
                                    34.209285879580023, 34.232920976438066, 34.256594612037965,
                                    34.282398762223949, 34.306103851318099, 34.330076662693102,
                                    34.353746165062276, 34.377636214278802, 34.401227341593156,
                                    34.424748948403277, 34.448261034027794, 34.473567995260709,
                                    34.497124232804225, 34.520506360636638, 34.543782780072490,
                                    34.566940376881824, 34.589972531158821, 34.612865735108123,
                                    34.635609723545109, 34.658195169187010, 34.680613397284461,
                                    34.702859314862970, 34.724922879212556, 34.746797565761938,
                                    34.768477518746941, 34.789957968033718, 34.811236559687181,
                                    34.832307704693491, 34.853167576285003, 34.873813976382735,
                                    34.894245072051930, 34.914460657653635, 34.934457928909893,
                                    34.954235863498198, 34.973793530655371, 34.993130655549194,
                                    35.012248542586434, 35.031145425077106, 35.049821306227656,
                                    35.068276094226377, 35.086510722537199, 35.104526976646426,
                                    35.122324205312481, 35.139903206921062, 35.157265257677750,
                                    35.174412038896932, 35.191346745033314, 35.208069780089602,
                                    35.224582682970045, 35.240887937021220, 35.256987798286566,
                                    35.272884612353749, 35.288582002600727, 35.304079480041082,
                                    35.319377505955536, 35.334477348236192, 35.349379560052739,
                                    35.364080391926194, 35.378576313160281, 35.392862852404676};

double clHeating[clDataSize] = {39.224844181639753, 39.224844181639753, 39.202567762461001,
                                39.179086639425265,39.179086639425265, 39.154263025315629,
                                39.154263025315629 ,39.099905496685267, 39.099905496685267,
                                39.099905496685267, 39.069942243791360, 39.002995380369583,
                                38.965206772522158, 38.965206772522158, 38.965206772522158,
                                38.965206772522158, 38.965206772522158, 38.878056471581843,
                                38.878056471581843, 38.878056471581843, 38.878056471581843,
                                38.878056471581843, 38.878056471581843, 38.768912115303266,
                                38.768912115303266, 38.701965281397946, 38.701965281397946,
                                38.701965281397946 , 38.710683290514112, 38.701965281397946,
                                38.701965281397946, 38.622784035350321, 38.525874022342265,
                                38.525874022342265, 38.400935285733965, 38.400935285733965,
                                38.400935285733965,38.400935285733965, 38.400935285733965,
                                38.400935285733965, 38.224844026678284,38.224844026678284,
                                38.224844026678284, 38.224844026678284, 38.224844026678284,
                                38.224844026678284, 38.224844026678284 ,38.224844026678284,
                                38.224844026678284,38.224844026678284 ,38.224844026678284,
                                38.224844026678284, 38.224844026678284, 38.224844026678284,
                                37.923814031014302, 37.923814031014302, 37.923814031014302,
                                37.923814031014302, 37.923814031014302,  37.923814031014302,
                                -39.222716471147585 ,-39.222716471147585 ,-39.222716471147585,
                                -39.222716471147585 ,-39.222716471147585, -39.222716471147585,
                                -39.222716471147585 ,-39.222716471147585 ,-39.222716471147585,
                                -39.222716471147585 ,-39.222716471147585 ,-39.222716471147585,
                                -39.222716471147585 ,-39.222716471147585, -39.222716471147585,
                                -39.222716471147585 ,-39.222716471147585 ,-39.222716471147585,
                                -39.222716471147585 ,-39.222716471147585, -39.222716471147585,
                                -39.222716471147585 ,-39.222716471147585, -39.222716471147585,
                                -39.222716471147585, -39.222716471147585, -39.222716471147585,
                                -39.222716471147585, -39.222716471147585, -39.222716471147585};


    int itmask[in];   
    int icmbTfloor = 1;
    int iClHeat = 1;
    int iZscale = 1;

    for (int i=0; i<in; ++i) {
        rhoH[i] = 1.0;
        metallicity[i] = 0.1;
        logtem[i] = 1.0;
        itmask[i] = 1;
        edot[i] = 23.0;
        for (int j=0; j<jn; ++j) {
            for (int k=0; k<kn; ++k) {
                d[i*jn*kn+j*kn+k] = 1.0;
            }
        }
    }

    comp2 = 2.73;
    dom = 0.99843257445223532;
    zr = 0.;
    FORTRAN_NAME(cool1d_cloudy_g)(d, rhoH, metallicity, 
                                  &in, &jn, &kn, &is, &ie, &j, &k,
                                  logtem, edot, &comp2, &dom, &zr,
                                  &icmbTfloor, &iClHeat, &iZscale,
                                  &clGridRank, clGridDim, 
                                  clPar1, clPar2, clPar3,
                                  &clDataSize, clCooling, clHeating, itmask);


    for (int i=0; i<in; ++i) {
        EXPECT_DOUBLE_EQ(edot[i], edot_reference[i]);
        //ASSERT_NEAR(edot[i], edot_reference[i], 1e-8);
    }
}
